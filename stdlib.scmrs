; Standard library for scheme-rs

(define-syntax if ()
    ((if condition consequence alternative)
     (cond (condition consequence)
           (else alternative))))
(define-syntax for (in)
    ((for i in iterator expression)
     (for-iterator iterator (lambda (i) expression)))
    ((for list as element expression)
     (for-list-as list (lambda (element) expression))))
(define-syntax set! ()
    ((set! binding value)
     (set-binding-to-value (quote binding) value)))
(define-syntax cadr () ((_ list) (car (cdr list))))
(define-syntax cddr () ((_ list) (cdr (cdr list))))
(define-syntax caddr () ((_ list) (car (cddr list))))
(define-syntax cdddr () ((_ list) (cdr (cddr list))))
(define-syntax cadddr () ((_ list) (car (cdddr list))))
(define-syntax 1- () ((_ x) (- x 1)))
(define-syntax 1+ () ((_ x) (+ x 1)))
(define-syntax double () ((_ x) (+ x x)))

(define (halve x) (/ x 2))
(define (even? x) (eqv? (remainder x 2) 0))
(define (square x) (* x x))
(define (cube x) (* x x x))
(define (! n)
    (define (iter acc n)
        (if (= n 0)
            acc
            (iter (* acc n) (- n 1))))
    (iter 1 n))
(define (range from to)
    (lambda (i)
        (define n (+ i from))
        (if (>= n to)
            #f
            n)))
(define (collect iterator)
    (define (iter acc iterator i)
        (define current (iterator i))
        (if (not current)
            acc
            (iter (push acc current) iterator (1+ i))))
    (iter '() iterator 0))

;(define (for-iterator iterator to-run)
;    (define (iter iterator to-run i)
;        (define current (iterator i))
;        (if (not current)
;            null
;            (begin
;                (to-run current)
;                (iter iterator to-run (1+ i)))))
;    (iter iterator to-run 0))

(define (for-iterator iterator to-run)
    (define (iter i)
        (define current (iterator i))
        (if (not current)
            null
            (begin
                (to-run current)
                (iter (1+ i)))))
    (iter 0))

(define (for-list-as xs to-run)
    (if (eqv? xs '())
        null
        (begin
            (to-run (car xs))
            (for-list-as (cdr xs) to-run))))
(define (fib n)
    (define (iter a b i)
        (if (= i 0)
            b
            (iter b (+ a b) (1- i))))
    (if (= n 0)
        0
        (iter 0 1 (1- n))))