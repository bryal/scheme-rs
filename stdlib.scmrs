; Standard library for scheme-rs

(define-syntax if ()
    ((if condition consequence alternative)
     (cond (condition consequence)
           (else alternative)))
    ((if condition consequence)
     (cond (condition consequence))))
(define-syntax for (in)
    ((for i in iterator expression)
     (for-iterator iterator (lambda (i) expression)))
    ((for list as element expression)
     (for-list-as list (lambda (element) expression))))
(define-syntax set! ()
    ((set! binding value)
     (set-binding-to-value (quote binding) value)))
(define-syntax cadr () ((_ list) (car (cdr list))))
(define-syntax cddr () ((_ list) (cdr (cdr list))))
(define-syntax caddr () ((_ list) (car (cddr list))))
(define-syntax cdddr () ((_ list) (cdr (cddr list))))
(define-syntax cadddr () ((_ list) (car (cdddr list))))
(define-syntax 1- () ((_ x) (- x 1)))
(define-syntax 1+ () ((_ x) (+ x 1)))
(define-syntax double () ((_ x) (+ x x)))
(define-syntax displayln ()
    ((_ x) (begin (display x) (newline))))
(define-syntax option (None)
    ((_ None) (list #t '()))
    ((_ x)    (list #f x)))
(define-syntax let (let)
    ((let ((bindings values) ...) body ...)
     ((lambda (bindings ...) body ...) values ...)))

; Math
(define (halve x) (/ x 2))
(define (even? x) (eqv? (remainder x 2) 0))
(define (square x) (* x x))
(define (cube x) (* x x x))
(define (! n)
    (define (iter acc n)
        (if (= n 0)
            acc
            (iter (* acc n) (- n 1))))
    (iter 1 n))
(define (max a b)
    (if (> a b)
        a
        b))
(define (min a b)
    (if (< a b)
        a
        b))

(define (some? maybe)
    (if (car maybe)
        #f
        #t))
(define (unwrap maybe)
    ; Add some sort of panic or scm_error support
    (cadr maybe))

; TODO: update iterators
; iterator is (acc advance)
; tprocedure `next` runs (advance acc) and updates acc.
; Returns option depending on result of above

; Iterators must return an option.
(define (range from to)
    (lambda (i)
        (if (>= to from)
            (begin
                (define n (+ from i))
                (if (and (< n to) (>= n from))
                    (option n)
                    (option None)))
            (begin
                (define n (- from i))
                (if (and (> n to) (<= n from))
                    (option n)
                    (option None))))))
(define (take n-to-take iterator1)
    (lambda (i)
        (if (< i n-to-take)
            (iterator1 i)
            (option None))))
(define (skip n-to-skip iterator2)
    (lambda (i)
        (iterator2 (+ i n-to-skip))))
(define (map iterator mapper)
    (lambda (i)
        (define current (iterator i))
        (if (some? current)
            (mapper current)
            (option None))))
(define (collect iterator)
    (define (iter acc iterator i)
        (define current (iterator i))
        (if (not current)
            acc
            (iter (push acc current) iterator (1+ i))))
    (iter '() iterator 0))

(define (for-iterator iterator to-run)
    (define (iter i)
        (define current (iterator i))
        (if (not (some? current))
            null
            (begin
                (to-run (unwrap current))
                (iter (1+ i)))))
    (iter 0))

(define (for-list-as xs to-run)
    (if (eqv? xs '())
        null
        (begin
            (to-run (car xs))
            (for-list-as (cdr xs) to-run))))
(define (fib n)
    (define (iter a b i)
        ;(var-stack)
        (if (= i 0)
            b
            (iter b (+ a b) (1- i))))
    (if (= n 0)
        0
        (iter 0 1 (1- n))))

; TODO: add supprt for brackets as an alias to (list ) maybe?